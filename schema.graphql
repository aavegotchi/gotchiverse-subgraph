# Events
type TransferEvent @entity {
    id: ID!
    block: BigInt!
    timestamp: BigInt!
    contract: Bytes
    from: Bytes
    to: Bytes
    tokenId: BigInt
    transaction: Bytes
}

type MintParcelEvent @entity {
    id: ID!
    block: BigInt!
    timestamp: BigInt!
    from: Bytes
    to: Bytes
    owner: Bytes
    tokenId: BigInt
    transaction: Bytes
}

type ChannelAlchemicaEvent @entity {
    id: ID!
    block: BigInt!
    timestamp: BigInt!

    gotchi: Gotchi!
    parcel: Parcel!

    realmId: BigInt
    gotchiId: BigInt

    alchemica: [BigInt!]!
    spilloverRate: BigInt!
    spilloverRadius: BigInt!

    transaction: Bytes
}

type AlchemicaClaimedEvent @entity {
    id: ID!
    block: BigInt!
    timestamp: BigInt!
    transaction: Bytes
    gotchi: Gotchi
    parcel: Parcel

    realmId: BigInt
    gotchiId: BigInt

    alchemicaType: BigInt
    amount: BigInt

    spilloverRadius: BigInt
    spilloverRate: BigInt
}

type ExitAlchemicaEvent @entity {
    id: ID!
    block: BigInt!
    timestamp: BigInt!
    transaction: Bytes

    gotchi: Gotchi
    alchemica: [BigInt!]!

    gotchiId: BigInt
}

type EquipInstallationEvent @entity {
    id: ID!
    block: BigInt!
    timestamp: BigInt!
    transaction: Bytes

    parcel: Parcel!
    installation: InstallationType!

    x: BigInt!
    y: BigInt!

    realmId: BigInt
    installationId: BigInt
}

type UnequipInstallationEvent @entity {
    id: ID!
    block: BigInt!
    timestamp: BigInt!
    transaction: Bytes

    parcel: Parcel!
    installation: InstallationType!

    x: BigInt!
    y: BigInt!

    realmId: BigInt
    installationId: BigInt
}

type InstallationUpgradedEvent @entity {
    id: ID!
    block: BigInt!
    timestamp: BigInt!
    transaction: Bytes

    parcel: Parcel!
    prevInstallation: InstallationType!
    nextInstallation: InstallationType!

    x: BigInt!
    y: BigInt!

    realmId: BigInt
    prevInstallationId: BigInt
    nextInstallationId: BigInt
}

type UpgradeQueuedEvent @entity {
    id: ID!
    block: BigInt!
    timestamp: BigInt!
    transaction: Bytes!

    owner: Bytes!
    realmId: BigInt
    queueIndex: BigInt!

    parcel: Parcel
}

type MintTileEvent @entity {
    id: ID!
    block: BigInt!
    timestamp: BigInt!
    transaction: Bytes
    owner: Bytes
    tile: TileType
}

type MintTilesEvent @entity {
    id: ID!
    block: BigInt!
    timestamp: BigInt!
    transaction: Bytes
    owner: Bytes
    tile: TileType
    amount: Int
}

type MintInstallationEvent @entity {
    id: ID!
    block: BigInt!
    timestamp: BigInt!
    transaction: Bytes
    owner: Bytes
    installationType: InstallationType
}

type MintInstallationsEvent @entity {
    id: ID!
    block: BigInt!
    timestamp: BigInt!
    transaction: Bytes
    owner: Bytes
    installationType: InstallationType
    amount: Int
}

type UpgradeInitiatedEvent @entity {
    id: ID!
    block: BigInt!
    timestamp: BigInt!
    transaction: Bytes
    parcel: Parcel
    installation: InstallationType!
    blockInitiated: BigInt!
    readyBlock: BigInt!

    x: BigInt!
    y: BigInt!

    realmId: BigInt
    installationId: BigInt
}

type AddInstallationTypeEvent @entity {
    id: ID!
    block: BigInt!
    timestamp: BigInt!
    transaction: Bytes
    installationType: InstallationType
}

type EditInstallationTypeEvent @entity {
    id: ID!
    block: BigInt!
    timestamp: BigInt!
    transaction: Bytes
    installationType: InstallationType
}

type DeprecateInstallationEvent @entity {
    id: ID!
    block: BigInt!
    timestamp: BigInt!
    transaction: Bytes
    installationType: InstallationType
}

type EquipTileEvent @entity {
    id: ID!
    block: BigInt!
    timestamp: BigInt!
    transaction: Bytes
    parcel: Parcel
    tile: Tile
    x: BigInt
    y: BigInt

    realmId: BigInt
    tileId: BigInt
}

type UnequipTileEvent @entity {
    id: ID!
    block: BigInt!
    timestamp: BigInt!
    transaction: Bytes
    parcel: Parcel
    tile: Tile
    x: BigInt
    y: BigInt

    realmId: BigInt
    tileId: BigInt
}

type CraftTimeReducedEvent @entity {
    id: ID!
    block: BigInt!
    timestamp: BigInt!
    transaction: Bytes!

    x: BigInt!
    y: BigInt!
    blocksReduced: BigInt!
}

type UpgradeTimeReducedEvent @entity {
    id: ID!
    block: BigInt!
    timestamp: BigInt!
    transaction: Bytes!
    parcel: Parcel!

    x: BigInt!
    y: BigInt!
    blocksReduced: BigInt!

    realmId: BigInt
}

type UpgradeFinalizedEvent @entity {
    id: ID!
    block: BigInt!
    timestamp: BigInt!
    transaction: Bytes!
    parcel: Parcel!
    x: BigInt!
    y: BigInt!
    installation: InstallationType
}

type URIEvent @entity {
    id: ID!
    block: BigInt!
    timestamp: BigInt!
    transaction: Bytes!
    contract: Bytes!
    tokenId: BigInt!
    value: String
}

type Parcel @entity {
    id: ID!
    equippedInstallations: [InstallationType!]!
    equippedTiles: [TileType!]!
    lastChanneledAlchemica: BigInt
    lastClaimedAlchemica: BigInt
    owner: Bytes

    tokenId: BigInt
    parcelId: String
    coordinateX: BigInt
    coordinateY: BigInt
    district: BigInt
    parcelHash: String

    fudBoost: BigInt
    fomoBoost: BigInt
    alphaBoost: BigInt
    kekBoost: BigInt

    size: BigInt
}

type Gotchi @entity {
    id: ID!
    lastChanneledAlchemica: BigInt
}

type Tile @entity {
    id: ID!
    type: TileType
    x: BigInt
    y: BigInt
    equipped: Boolean
    parcel: Parcel
    owner: Bytes
}

type Installation @entity {
    id: ID!
    type: InstallationType
    x: BigInt
    y: BigInt
    equipped: Boolean
    parcel: Parcel
    owner: Bytes
}

type InstallationType @entity {
    id: ID!
    width: Int
    height: Int
    installationType: BigInt
    level: Int
    alchemicaType: Int
    spillRadius: BigInt
    spillRate: Int
    upgradeQueueBoost: Int
    craftTime: BigInt
    nextLevelId: BigInt
    deprecated: Boolean
    alchemicaCost: [BigInt!]
    harvestRate: BigInt
    capacity: BigInt
    prerequisites: [BigInt!]
    amountPrerequisites: Int
    name: String
    amount: BigInt!
    uri: String
}

type TileType @entity {
    id: ID!
    width: Int!
    height: Int!
    deprecated: Boolean!
    tileType: Int!
    craftTime: BigInt!
    alchemicaCost: [BigInt!]!
    name: String!
    amount: BigInt!
    uri: String
}

type Stat @entity {
    id: ID!
    countChannelAlchemicaEvents: BigInt!
    countParcelInstallations: BigInt!
    countInstallationTypes: BigInt!
    countUpgradesInitiated: BigInt!

    alchemicaSpendOnInstallations: [BigInt!]!
    alchemicaSpendOnUpgrades: [BigInt!]!
    alchemicaSpendOnTiles: [BigInt!]!
    alchemicaSpendTotal: [BigInt!]!
    alchemicaChanneledTotal: [BigInt!]!
    alchemicaClaimedTotal: [BigInt!]!
    alchemicaExitedTotal: [BigInt!]!

    tilesEquippedTotal: BigInt!
    tilesUnequippedTotal: BigInt!
    tilesEquippedCurrent: BigInt!
    tilesMinted: BigInt!

    installationsMintedTotal: BigInt!
    installationsUpgradedTotal: BigInt!
    installationsEquippedTotal: BigInt!
    installationsUnequippedTotal: BigInt!
    installationsEquippedCurrent: BigInt!

    craftTimeReduced: BigInt!
    upgradeTimeReduced: BigInt!

    gltrSpendOnUpgrades: BigInt
    gltrSpendOnCrafts: BigInt
    gltrSpendTotal: BigInt
}

## Core
type Aavegotchi @entity {
    id: ID!
    tokenId: BigInt!
    kinship: BigInt!
    brs: BigInt!
    xp: BigInt!
    status: BigInt!
    owner: Bytes!
    originalOwner: Bytes!

    equippedWearables: [BigInt!]
    numericTraits: [BigInt!]
}

## Lending
type GotchiLending @entity {
    id: ID!
    rentDuration: BigInt!
    upfrontCost: BigInt!
    period: BigInt!

    gotchi: Aavegotchi!

    # gotch filter attributes
    gotchiBRS: BigInt
    gotchiTokenId: BigInt!
    gotchiKinship: BigInt!

    # profit split
    splitOwner: BigInt
    splitBorrower: BigInt
    splitOther: BigInt

    # tokens to share
    tokensToShare: [Bytes!]!

    whitelist: Whitelist
    whitelistMembers: [Bytes!]!
    whitelistId: BigInt
    thirdPartyAddress: Bytes

    borrower: Bytes
    lender: Bytes
    originalOwner: Bytes

    cancelled: Boolean!
    completed: Boolean!
    lastClaimed: BigInt

    timeAgreed: BigInt
    timeCreated: BigInt
    timeEnded: BigInt

    claimed: [ClaimedToken!]! @derivedFrom(field: "lending")
}

type Whitelist @entity {
    id: ID!
    name: String
    owner: Bytes
    members: [Bytes!]!
}

type ClaimedToken @entity {
    id: ID!
    lending: GotchiLending!
    token: Bytes!
    amount: BigInt!
}

type ItemType @entity {
    id: ID!
    traitModifiers: [BigInt!]
    rarityScoreModifier: BigInt
    name: String
    experienceBonus: BigInt
}
